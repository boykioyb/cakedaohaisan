<?php

App::uses('AppController', 'Controller');

/**
 * Quốc gia:
 * Tên và mã lưu theo chuẩn: ISO 3166-1 alpha-2, trong file setting
 */
class CountriesController extends AppController {

    public $uses = array('Country');

    public function beforeFilter() {
        parent::beforeFilter(); // TODO: Change the autogenerated stub        
        $this->setInit();
    }

    public function index() {
        // nếu không có quyền truy cập, thì buộc user phải đăng xuất        
        if (!$this->isAllow()) {
            return $this->redirect($this->Auth->loginRedirect);
        }

        $options = [
            'order' => array('modified' => 'DESC')
        ];

        $this->setSearchConds($options);
        $this->Paginator->settings = $options;
        $list_data = $this->Paginator->paginate($this->modelClass);
        foreach ($list_data as $index => $data) {
            $this->setListOtherNames($list_data[$index][$this->modelClass]);
        }
        $this->set([
            'breadcrumb' => [
                array(
                    'url' => Router::url(array('action' => 'index')),
                    'label' => __('country_title'),
                )
            ],
            'page_title' => __('country_title'),
            'list_data' => $list_data
        ]);

        $lang_code = $this->Session->read('lang_code');
        if (empty($lang_code)) {
            $lang_code = Configure::read('S.Lang_code_default');
        }
        $this->set('lang_code', $lang_code);
    }

    public function add() {
        // nếu không có quyền truy cập, thì buộc user phải đăng xuất        
        if (!$this->isAllow()) {
            return $this->redirect($this->Auth->loginRedirect);
        }

        $this->saveRequestData();

        $this->set([
            'breadcrumb' => [
                array(
                    'url' => Router::url(array('action' => 'index')),
                    'label' => __('country_title'),
                ),
                array(
                    'url' => Router::url(array('action' => __FUNCTION__)),
                    'label' => __('add_action_title'),
                )
            ],
            'page_title' => __('country_title')
        ]);
    }

    public function edit($id = null) {
        // nếu không có quyền truy cập, thì buộc user phải đăng xuất        
        if (!$this->isAllow()) {
            return $this->redirect($this->Auth->loginRedirect);
        }

        if (!$this->{$this->modelClass}->exists($id)) {
            throw new NotFoundException(__('invalid_data'));
        }

        $this->saveRequestData();

        $this->setRequestData($id);

        $this->set([
            'breadcrumb' => [
                array(
                    'url' => Router::url(array('action' => 'index')),
                    'label' => __('country_title'),
                ),
                array(
                    'url' => Router::url(array('action' => __FUNCTION__, $id)),
                    'label' => __('edit_action_title'),
                )
            ],
            'page_title' => __('country_title')
        ]);

        $this->render('add');
    }

    protected function setSearchConds(&$options) {
        $customSearchField = [];
        if (isset($this->request->query['name']) && strlen(trim($this->request->query['name'])) > 0) {
            $customSearchField['name'] = 'string_ascii';
        }
        if (isset($this->request->query['status']) && strlen($this->request->query['status']) > 0) {
            $customSearchField['status'] = 'int';
        }
        $this->commonSearchCondition($options, $customSearchField);
    }

    protected function setInit() {
        $this->set('model_name', $this->modelClass);
        $this->set('status', Configure::read('sysconfig.App.status'));
        $this->set('country_codes', Configure::read('S.country_codes'));
        $this->set('language_codes', Configure::read('S.language_codes'));
        $this->set('langCodes', $this->langCodes);
    }

    private function saveRequestData() {
        if ($this->request->is('post') || $this->request->is('put')) {
            if (isset($this->request->data[$this->modelClass]['name']) && $this->request->data[$this->modelClass]['name'] != null) {
                $this->request->data[$this->modelClass]['code'] = $this->convert_vi_to_en($this->request->data[$this->modelClass]['name']);
            }
            $this->modifylangcode($this->request->data[$this->modelClass]);

            unset($this->request->data[$this->modelClass]['lang_']);

            if (empty($this->request->data[$this->modelClass]['language_code'])) {
                $conditions = array(
                    'code' => $this->request->data[$this->modelClass]['code'],
                );
            } else {
                $conditions = array(
                    '$or' => array(
                        array('code' => $this->request->data[$this->modelClass]['code']),
                        array('language_code' => $this->request->data[$this->modelClass]['language_code']),
                        array('language_code' => $this->request->data[$this->modelClass]['language_code']),
                    )
                );
            }
            if (!empty($this->request->data[$this->modelClass]['id'])) {
                $conditions['_id'] = array(
                    '$ne' => new MongoId($this->request->data[$this->modelClass]['id'])
                );
            }
            $default_options = array(
                'conditions' => $conditions
            );
            $countByCode = $this->{$this->modelClass}->find('all', $default_options);
            if (count($countByCode) > 0) {
                $this->Session->setFlash(__('country_code_duplicate'), 'default', array(), 'bad');
            } else {
                if ($this->{$this->modelClass}->save($this->request->data[$this->modelClass])) {
                    $this->Session->setFlash(__('save_successful_message'), 'default', array(), 'good');
                    $this->redirect(array('action' => 'index'));
                } else {
                    $this->Session->setFlash(__('save_error_message'), 'default', array(), 'bad');
                }
            }
        }

    }

    /**
     * @param $id
     * @param bool $clone
     */
    private function setRequestData($id, $clone = false) {

        $data = $this->{$this->modelClass}->find('first', array(
            'conditions' => array(
                'id' => new MongoId($id),
            ),
        ));

        $this->request->data = $data;

        if ($clone && isset($this->request->data[$this->modelClass]['id'])) {
            $this->request->data[$this->modelClass]['ref_id'] = $this->request->data[$this->modelClass]['id'];
            unset($this->request->data[$this->modelClass]['id']);
        }
    }

    private function modifylangcode(&$data, $lang_ = false) {
        if (empty($data)) {
            return false;
        }
        $lang_code = $this->Session->read('lang_code');

        if (!empty($data['lang_code'])) {
            $lang_code = $data['lang_code'];
        }

        if ($lang_) {
            $lang_code = $lang_;
        }

        if (empty($lang_code)) {
            $lang_code = Configure::read('S.Lang_code_default');
        }
        $this->set('lang_code', $lang_code);
        if (!empty($lang_code)) {
            $data['lang_code'] = $lang_code;
        }
    }

}

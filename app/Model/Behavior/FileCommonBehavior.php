<?php

App::uses('Folder', 'Utility');

class FileCommonBehavior extends ModelBehavior {
    /*
     * delete folder image when delete record
     * @author TungPT
     */

    public function beforeDelete(\Model $model, $cascade = true) {
        parent::beforeDelete($model, $cascade); // TODO: Change the autogenerated stub

        $arr_folder_path = array();
        $langConfigs = CakeSession::read('List_lang_code');

        if (empty($langConfigs)) {
            return;
        }

        if (!isset($model->id) || empty($model->id)) {
            return;
        }

        //load model
        App::uses($model->alias, 'Model');
        $user_model = new $model->alias();

        $record_delete = $user_model->find('first', array('conditions' => array('id' => new MongoId($model->id))));

        if (empty($record_delete)) {
            return;
        }

        //get array folder path
        foreach ($langConfigs as $key => $value) {
            if (!isset($record_delete[$model->alias][$key]['images']) || !is_array($record_delete[$model->alias][$key]['images'])) {
                continue;
            } else {
                foreach ($record_delete[$model->alias][$key]['images'] as $sub) {
                    if (is_array($sub)) {
                        foreach ($sub as $sub_path) {
                            $arr_folder_path[] = $sub_path;
                        }
                    } else {
                        $arr_folder_path[] = $sub;
                    }
                }
            }
        }

        //if model is not multi language
        //try to get array folder path again
        if (isset($record_delete[$model->alias]['images']) && !empty($record_delete[$model->alias]['images'])) {
            foreach ($record_delete[$model->alias]['images'] as $sub) {
                if (is_array($sub)) {
                    foreach ($sub as $sub_path) {
                        $arr_folder_path[] = $sub_path;
                    }
                } else {
                    $arr_folder_path[] = $sub;
                }
            }
        }

        if (empty($arr_folder_path)) {
            return;
        }

        $arr_path = array();
        //get array path without file name
        foreach ($arr_folder_path as $index => $path) {
            $arr_sub_path = explode("/", $path);
            if (empty($arr_sub_path)) {
                continue;
            }
            $folder_path = APP;
            for ($i = 0; $i < count($arr_sub_path) - 1; $i++) {
                $folder_path .= $arr_sub_path[$i] . DS;
            }
            if ($folder_path != APP) {
                $arr_path[] = $folder_path;
            }
        }
        if (empty($arr_path)) {
            return;
        }
        //get folder befor last folder 1 level and delete that folder
        $final_arr_folder_path = array_unique($arr_path);
        foreach ($final_arr_folder_path as $path) {
            $path = dirname($path);
            $folder = new Folder($path);
            $folder->delete();
        }
    }

}

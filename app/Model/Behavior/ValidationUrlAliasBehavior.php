<?php

class ValidationUrlAliasBehavior extends ModelBehavior {
    public function beforeValidate(Model $model, $options = array())
    {
        parent::beforeValidate($model, $options); // TODO: Change the autogenerated stub
        $langCodes = Configure::read('S.Lang');
        foreach ($langCodes as $code => $name) {
            $fieldValidate = array(
                'url_alias' => $code . '.url_alias',
                'name' => $code . '.name',
            );
            foreach ($fieldValidate as $key => $item) {
                if (isset($model->data[$model->alias][$code][$key])) {
                    $model->data[$model->alias][$code][$key] = trim($model->data[$model->alias][$code][$key]);
                    // notEmpty
                    if (empty($model->data[$model->alias][$code][$key])) {
                        $model->validationErrors[$code][$key] = 'This field is not empty.';
                        return false;
                    } else { // isUnique
                        if ($key == 'name' && empty($model->data[$model->alias][$code]['url_alias'])) {
                            continue;
                        }
                        $options = array(
                            'conditions' => array(
                                $item => $model->data[$model->alias][$code][$key],
                            )
                        );
                        if (!empty($model->data[$model->alias]['id'])) {
                            $options['conditions']['id'] = array(
                                '$ne' => $model->data[$model->alias]['id']
                            );
                        }
                        $checkExisted = $model->find('first', $options);

                        if ($checkExisted) {
                            $model->validationErrors[$code][$key] = 'This field has already been taken.';
                            return false;
                        }
                    }
                }
            }
        }

        return true;
    }
}
